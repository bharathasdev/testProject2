
       /*
        // draws Box
        var data = {
            x:0, 
            y:0, 
            width:990, 
            height:576,
            //circleRadius:200,
            drawStroke:true,
            strokeWidth:5,
            fillColor:"0x1099bb",
            strokeColor:"0xFF0000" // color format no '#'
        
        };
        
        var myDisplay3 = new DisplayObject(data);
        var stage = Stage.getStage();
        stage.addChild(myDisplay3.node);
        

        // draws Circle
        var data = {
            x:100+5, 
            y:100+5, 
            //width:100, 
            //height:100,
            circleRadius:100,
            drawStroke:true,
            strokeWidth:5
        };
        

       var myDisplay = new DisplayObject(data);
       var stage = Stage.getStage();
       stage.addChild(myDisplay.node);
       myDisplay.setPivotPoint(1, 1);

       myDisplay.setScale(1,1);
      

        // Text Field creation and Usage
        var data = {
            fontFamily: 'Arial',
            fontSize: 50,
            fontStyle: 'italic',
            fontWeight: 'bold',
            fill: '#FFFFFF',// ['#ffffff', '#00ff99'], // gradient
            stroke: '#FF0000',
            strokeThickness: 1,
            dropShadow: false,
            dropShadowColor: '#000000',
            dropShadowBlur: 2,
            dropShadowAngle: Math.PI / 6,
            dropShadowDistance: 2,
            wordWrap: true,
            wordWrapWidth: 100,
            text:"Success!......"
        }

        var myDisplay = new TextDisplay(data);
        var stage = Stage.getStage();
        stage.addChild(myDisplay.node);

        myDisplay.setXY(300, 0);
        myDisplay.setText("Hello");

        //myDisplay.updateStyle();

        myDisplay.setTextFillColor("#FFFFFF");
        myDisplay.setTextStroke("#000000", 10);


        var myDisplay2 = new TextDisplay(data);
        stage.addChild(myDisplay2.node);

        myDisplay2.setXY(200, 200);

        let styleObj = {
            "dropShadow": true,
            "dropShadowBlur": 3,
            "dropShadowDistance": 2,
            "fill": [
                "#ff8000",
                "yellow",
                "#ff8040"
            ],
            "fillGradientStops": [
                0.4,
                0.5,
                0.7
            ],
            "fontSize": 91,
            "fontWeight": "bold",
            "strokeThickness": 2
        }

        myDisplay2.updateStyle(styleObj);

        //myDisplay2.setTextFillColor("#FF0000");
        //myDisplay2.setTextStroke("#FFFFFF", 10);
        //myDisplay2.setAlpha(0.5);
        myDisplay2.setFontSize(60);

        myDisplay2.setPivotPoint(1, 1);

        //myDisplay2.pivotY = 0.5;
        
        //myDisplay2.setScale(0.5, 0.5);

        //myDisplay2.setAnchorPoint(0, 0);
        myDisplay2.setScale(1, 1);
        

        // draws Circle
        var data = {
            x:990-100+5-8, 
            y:576-100+5-8, 
            //width:100, 
            //height:100,
            circleRadius:100,
            drawStroke:true,
            strokeWidth:5,
            fillColor:"0x1099bb",
        };
        

       var myDisplay = new DisplayObject(data);
       var stage = Stage.getStage();
       stage.addChild(myDisplay.node);
       //myDisplay.setPivotPoint(1, 1);

       myDisplay.setScale(1, 1);*/


    //  Custom Event listener

    Listener.registerEvent("SpineReady");// creates event;

    Listener.dispatchEvent("SpineReady", this); // Dispatching Event 

    this.symbolRoyals3.addEventListener('SpineReady', (p)=>{
        console.log('SpineReady1:This is big bang listener yo!', p);
        console.log(this);
    });

    
    Listener.addEventListener('SpineReady', (p)=>{
        console.log('SpineReady2:This is big bang listener yo!', p);
    });
    


    //  Custom Event listener - End

    // Spine Animation

/*
    // adding Spine Ref

    var data = {
        x:300, 
        y:350,
        'assets':["spineBoy"]
       }
    this.spineBoyAnim = new SpineDisplay(data);
    var stage = Stage.getStage();   
         
    stage.addChild(this.spineBoyAnim.node);

   console.log(this.spineBoyAnim.getAnimations()) ; // ["walk", jump]

   
   //this.spineBoyAnim.playAnimationById("walk", true);
   this.spineBoyAnim.queAnimationById(["jump", "walk"])
   //this.spineBoyAnim.playAnima


   var data = {
    x:300, 
    y:350,
    'assets':["symbolRoyals"]
   }
this.symbolRoyals = new SpineDisplay(data);
var stage = Stage.getStage();   
     
stage.addChild(this.symbolRoyals.node);

console.log(this.symbolRoyals.getAnimations()) ; // ["walk", jump]

var data = {
x:550, 
y:400,
id:"1",
'assets':["symbolRoyals"]
}
this.symbolRoyals2 = new SpineDisplay(data);

stage.addChild(this.symbolRoyals2.node);
//this.spineBoyAnim.playAnimationById("walk", true);
this.symbolRoyals2.playAnimationById("ace_win", true);


var data = {
    x:120, 
    y:400,
    id:"2",
    'assets':["symbolRoyals"]
}
this.symbolRoyals3 = new SpineDisplay(data);

stage.addChild(this.symbolRoyals3.node);
//this.spineBoyAnim.playAnimationById("walk", true);
this.symbolRoyals3.playAnimationById("ace_stop", false);
//this.symbolRoyals3.registerEvent('big bang');


this.symbolRoyals3.addEventListener('SpineReady', (p)=>{
    console.log('SpineReady1:This is big bang listener yo!', p);
    console.log(this);
});


Listener.addEventListener('SpineReady', (p)=>{
    console.log('SpineReady2:This is big bang listener yo!', p);
});



this.symbolRoyals3.playAnimationById("ace_stop", false);

this.spineBoyAnim.playAnimationById("walk", true);

*/

// Spine Animation - End


/*************************/


/************************/


// Symbol Animation

/*

var symbolData = {
    "symbolName":"king",
    "index":1,
    "position":10,
    "x":350,
    "y":400,
    "alpha":1,
    'assets':["symbolRoyals"],
    "staticAnimation":"king",
    "winAnimation":"king_win",
    "stopAnimation":"king_stop",
    "moveAnimation":"king_move",
    "landingAnimation":"king_move",
    "lom":{
        "landscape":{
            x:350, 
            y:400,
        },
        "portrait":{
            'x':160,
            'y':100
        }
    },
}

this.aceSymbol = new ReelSymbol(symbolData);
//this.aceSymbol.setAlpha(0.3);
//this.aceSymbol.show();
this.aceSymbol.setScale(0.5, 0.5);
this.aceSymbol.playStaticAnimation();

this.aceSymbol.playWinAnimation();

this.aceSymbol.setXY(700, 350);

stage.addChild(this.aceSymbol.node);*/

// event listeners

/*

Listener.addEventListener(BrowserEvents.ORIENTATION_CHANGE_TO_LANDSCAPE, ()=>{this.onChangeToLandscape(this)}, false);
Listener.addEventListener(BrowserEvents.ORIENTATION_CHANGE_TO_PORTRAIT, ()=>{this.onChangeToPortrait(this)}, false);

Listener.addEventListener(SpineEvents.SPINE_ANIMATION_START, (p)=>{this.spineAnimationStart(p)});
Listener.addEventListener(SpineEvents.SPINE_ANIMATION_FINISH, (p)=>{this.onSpineAnimationFinish(p)});


Listener.addEventListener(ReelSymbolEvents.SYMBOL_ANIMATION_START, (p)=>{this.onSymbolAnimationStart(p)});
Listener.addEventListener(ReelSymbolEvents.SYMBOL_ANIMATION_FINISH, (p)=>{this.onSymbolAnimationFinish(p)});

*/


// adding Spine Ref

// Spine Boy - Start
/*
var data = {
    x:300, 
    y:350,
    'assets':["spineBoy"],
    "lom":{
        "landscape":{
            x:300, 
            y:350,
        },
        "portrait":{
            'x':0,
            'y':0
        }
    }
}
this.spineBoyAnim = new SpineDisplay(data);
var stage = Stage.getStage();   
    
stage.addChild(this.spineBoyAnim.node);

//console.log(this.spineBoyAnim.getAnimations()) ; // ["walk", jump]

//this.spineBoyAnim.queAnimationById(["jump", "walk"])
this.spineBoyAnim.playAnimationById("walk", true);
*/
/*
 // Spine Boy - End

        // Spine Ace
        
        var data = {
            x:550, 
            y:400,
            id:"1",
            'assets':["symbolRoyals"],
            "lom":{
                "landscape":{
                    x:550, 
                    y:400,
                },
                "portrait":{
                    'x':160,
                    'y':100
                }
            }
        }

        this.symbolRoyals2 = new SpineDisplay(data);
    
        stage.addChild(this.symbolRoyals2.node);
    
        //this.symbolRoyals2.playAnimationById("ace_win", false);
*/


/********* CREATING THE BUTTON WITH A SIMPLE DISPLAY OBJECT **********/
var data = {
    'Type':"DisplayObject",
    //'anchor':0.5,
    //'scale':0.5,
    'x':200,
    'y': 0,
    "width":100,
    "height":60,
    "fillColor":"0x00FF00",
    "clickCallBack":()=>{this.startSpin()},
    "allowClick":true
}

var myButton = new DisplayObject(data);

       
stage.addChild(myButton.node);
//        myButton.clickable(false);


}


private startSpin()
{
this.myReel.startSpin();
//this.myReel.stopSpin();
console.log("Start Reels");
}
*/

/*


// click and modify the underlined values
TweenLite.to(graph, 2.5, { ease: CustomEase.create("custom", "M0,0 C0.128,0.572 0.231,0.94 0.486,1.014 0.646,1.06 0.838,1 1,1"), y: -500 });

*/


// creating Reels
var reelData = {
    //"id":"reel1",
    "x":200,
    "y":35,
    "numOfSymbolsTop":2,
    "numOfSymbolsBottom":2,
    "numberOfSymbolsinView":4,
    "reelWidth":130,
    "reelHeight":900,
    "symbolWidth":120,
    "sybolHeight":120,
    "spacingBetweenSymbols":0,
    "stopPositionOffset":0,
    "target_StopSpeed":1,
    "reelStartEasingDuration":2,
    "reelStopEasingDuration":1,
    "startDelay":0,
    "stopDelay":0,
    "maxReelSpinSpeed":30,
    "spinSpeed":30,
    "backgroundFillColor":"0x000000",
    "backgroundX":-35,
    "backgroundY":-150,
    "enableSlowStopReel":true,
    "slowDownMultiplier":1.5,
    "enableBounceAtStop":true,
  
    "lom":{
        "landscape":{
            x:350, 
            y:-150,
        },
        "portrait":{
            'x':160,
            'y':-150
        }
    },
}

Listener.addEventListener(ReelEvents.REEL_SPIN_START, (p)=>{this.onReelSpinStart(p)});
Listener.addEventListener(ReelEvents.REEL_SPIN_FINISH, (p)=>{this.onReelSpinFinish(p)});

this.myReel0 = new Reel(reelData);
//this.myReel.setScale(0.5, 0.5);
//this.myReel0.setXY(200, 35);
//this.myReel0.setY(35);
this.myReel0.setStartDelay(0);
//this.myReel.setY(-135);


stage.addChild(this.myReel0.node);

this.myReel1 = new Reel(reelData);
//this.myReel.setScale(0.5, 0.5);
this.myReel1.setXY(350, 35);
this.myReel1.setStartDelay(0.5);
//this.myReel.setY(-135);



// REELSET


//------------------------------------

// USAGE

//-----------------------------------
/*


var reelsetConfig = {

    "reelsetWidth":1600, 
    "reelsetHeight":920,
    //"backgroundColor":null, //0x1099bb
    "numberOfReels": 5,        
    "reelStopOrder":[ 0, 1, 2, 3, 4],        
    "reelStartOrder":[ 0, 1, 2, 3, 4],          
    "interReelSpinDelay":[0, 200, 400, 600, 800 ],
    "interReelStopDelay":[0, 200, 400, 600, 800 ],     
    "numberOfRowsOnTop":2,
    "numberOfRowsAtBottom":2,
    "numberOfRowsInView":4,
    "id":"mainReelset",
    "reelsXPos":[213, 511, 804, 1103, 1400],
    "reelsYPos":[300, 300, 300, 300, 300],
    "offsetX":[0, 0, 0, 0, 0],
    "offsetY":[5, 5, 5, 5, 5],
    "stopPositionOffset":0, // this can be used to fudge the reel Stop Position
    "debugMode":false,
    "reelConfigData":{
         //"id":"reel1",
        //"x":200,
        //"y":35,
        //"numOfSymbolsTop":3,
        //"numOfSymbolsBottom":3,
        //"numberOfSymbolsinView":4,
        "reelWidth":280,
        "reelHeight":875,
        "symbolWidth":240,
        "symbolHeight":220,
        "spacingBetweenSymbols":0, // Space between symbols
        //"stopPositionOffset":0, // this can be used to fudge the reel Stop Position
        "target_StopSpeed":1,
        "reelStartEasingDuration":2,
        "reelStopEasingDuration":1,
        //"startDelay":0, // Start Delay for the reel
        //"stopDelay":0, // Stop delay for the reel will 
        "maxReelSpinSpeed":50, // max Reel Spin Speed, this can be the same as spin speed
        "spinSpeed":50, // reelspin speed
        "backgroundFillColor":"0x000000", // fill color for the Reels background
        "backgroundX":-72,// to adjust the fill for the reels,
        "backgroundY":-125, // to adjust the fill for the reels,
        "enableSlowStopReel":false, // enables the reel slowDown abd stop
        "slowDownMultiplier":1, // rate of slow down 1 to 1.7
        "enableBounceAtStop":true, // enables the bounce at stop
        "symbolsOffsetX":0, // to adjust / nudge the reels without affecting anyother alignemnt
        "symbolsOffsetY":-590, // to adjust / nudge the reels without affecting anyother alignemnt
        "maskData":{"x":-138, "y":-250, "width":280, "height":855}, // Aperture view size relative to each reel
        //"debugMode":true // Draws  the fill for the reels and reelsets. This can be used to setup the reels Aperture view size relative to each reel

    },
    "lom":{
        "landscape":{
            x:92, 
            y:32,
            'scale':0.5
        },
        "portrait":{
            'x':58,
            'y':347,
            'scale':0.29
        }
    },


    
}

       var reelsetConfig = GameConfig.getConfig().reelsetConfig;
      
        this.myReelSet = new Reelset(reelsetConfig);
        stage.addChild(this.myReelSet.node);
        this.myReelSet.setScale(0.5, 0.5) 

        this.myReelSet.setXY(92, 32);

        /*
        //settings for right to left
        this.myReelSet.setReelStartOrder([4, 3, 2, 1, 0]);
        this.myReelSet.setInterReelSpinDelay([0, 200, 400, 600, 800]); // always in ascending order works based on the start reel order
        

        this.myReelSet.setReelStopOrder([4, 3, 2, 1, 0]);
        this.myReelSet.setInterReelStopDelay([0, 1000, 1000, 1000, 1000]);// always in ascending order works based on the start reel order
        
       
        
        

        
        // settings for left to right
        this.myReelSet.setReelStartOrder([0, 1, 2, 3, 4]);
        this.myReelSet.setInterReelSpinDelay([0, 200, 400, 600, 800 ]);
        
 
        this.myReelSet.setReelStopOrder([0, 1, 2, 3, 4]);
        this.myReelSet.setInterReelStopDelay([0, 1000, 1000, 1000, 1000]);

        //this.myReelSet.setReelSlowDown([false, false, false, false, true]);
        this.myReelSet.setReelSlowDown([false, false, true, false, true]);
        this.myReelSet.setReelSlowDownMultiplier([null, null, 0.5, null, 0.5]);
        //this.myReelSet.setReelSlowDownByReel(3, true);
        //this.myReelSet.setReelSlowDownByReel(4, true); */



        // when there is a reel slow down
        //when there is an anticipation in the game the reels can't stop at the same time        
        this.myReelSet.setReelStartOrder([2, 4 ,3, 1, 0]);
        this.myReelSet.setInterReelSpinDelay([0, 200, 400, 600, 800 ]);
        this.myReelSet.setReelStopOrder([2,4,3,1,0]);
        this.myReelSet.setInterReelStopDelay([0, 0, 0, 0, 0]); // for all the reels to stop at the same time
        
        this.myReelSet.setReelSlowDown([false, false, false, false, true]); // mesthod 1 to enable reel slow down
   

        // reelIndex, slowdown set to true, speed modifier, number of symbols to fudge
        //!!!!In the above last parameter you should use positive values like "5" for forward reading and negative values like -5 for backward value reading
        this.myReelSet.setReelSlowDownByReel(4, true, 1, 5); // recommended method 2 to take full control of reel slow down with reel by reel basis
        
    
      // The below lines of code explain the way to access the symbols by position from the reelset 
      // and triggerring various animation from and on the symbols
    
      // playing landing animation
      this.myReelSet.getSymbolByPosition(18).playLandingAnimation();
    
    
       // playing move animation
      this.myReelSet.getSymbolByPosition(18).playMoveAnimation();
    
    
       // playing a win animation
       this.myReelSet.getSymbolByPosition(18).playWinAnimation();
    
       // playing a different animation on a symbol from the same atlas
       this.myReelSet.getSymbolByPosition(18).playAnimationById("ten");
    
    
       // playing a different animation on a symbol from a different atlas
       // 1. set the static animation for a symbol by a symbolname from different atlas. This will rebuild the symbol to assign new atlas
       // 2. now you can play the animation from the new atlas
       this.myReelSet.getSymbolByPosition(18).setStaticAnimation("teddy"); // Symbol Name as parameter
       this.myReelSet.getSymbolByPosition(18).playAnimationById("star_win"); // Animation name as parameter


/*


var reelConfig = {
            //"id":"reel1",
            "x":200,
            "y":35,
            "numOfSymbolsTop":2,
            "numOfSymbolsBottom":2,
            "numberOfSymbolsinView":4,
            "reelWidth":130,
            "reelHeight":900,
            "symbolWidth":120,
            "sybolHeight":120,
            "spacingBetweenSymbols":0,
            "stopPositionOffset":0,
            "target_StopSpeed":1,
            "reelStartEasingDuration":2,
            "reelStopEasingDuration":1,
            "startDelay":0,
            "stopDelay":0,
            "maxReelSpinSpeed":30,
            "spinSpeed":30,
            "backgroundFillColor":"0x000000",
            "backgroundX":-35,
            "backgroundY":-150,
            "enableSlowStopReel":true,
            "slowDownMultiplier":1.5,
            "enableBounceAtStop":true,
          
            
        }



  
       this.myReel0 = new Reel(reelData);
       //this.myReel.setScale(0.5, 0.5);
       //this.myReel0.setXY(200, 35);
       //this.myReel0.setY(35);
       this.myReel0.setStartDelay(1000);
       //this.myReel.setY(-135);
       

       stage.addChild(this.myReel0.node);

       /*
        this.myReel1 = new Reel(reelData);
        //this.myReel.setScale(0.5, 0.5);
        this.myReel1.setXY(350, 35);
        this.myReel1.setStartDelay(0.5);
        //this.myReel.setY(-135);




        */